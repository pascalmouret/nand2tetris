<class>
  <keyword> class </keyword>
  <identifier> Bat </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> x </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="True" />
    <symbol> , </symbol>
    <identifier> y </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> width </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="True" />
    <symbol> , </symbol>
    <identifier> height </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> direction </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Bat </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> Ax </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Ay </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="1" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Awidth </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="2" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Aheight </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="3" declared="True" />
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> x </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ax </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> y </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ay </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="1" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> width </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Awidth </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="2" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> height </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Aheight </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="3" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> direction </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <intConst> 2 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> show </identifier>
          <identDesc name="show" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
          <identDesc name="Memory" kind="CLASS" declared="False"/>
          <identDesc name="deAlloc" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> show </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <identDesc name="Screen" kind="CLASS" declared="False"/>
          <identDesc name="setColor" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> true </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
          <identDesc name="draw" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> hide </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <identDesc name="Screen" kind="CLASS" declared="False"/>
          <identDesc name="setColor" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> false </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
          <identDesc name="draw" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <identDesc name="Screen" kind="CLASS" declared="False"/>
          <identDesc name="drawRectangle" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> x </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> x </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
              </term>
              <symbol> + </symbol>
              <term>
                <identifier> width </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
              </term>
              <symbol> + </symbol>
              <term>
                <identifier> height </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> setDirection </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> Adirection </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="True" />
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> direction </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Adirection </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
            </term>
            <symbol> + </symbol>
            <term>
              <identifier> width </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> setWidth </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> Awidth </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="True" />
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> hide </identifier>
          <identDesc name="hide" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> width </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Awidth </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> show </identifier>
          <identDesc name="show" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> move </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> direction </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
            </term>
            <symbol> = </symbol>
            <term>
              <intConst> 1 </intConst>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> x </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                </term>
                <symbol> - </symbol>
                <term>
                  <intConst> 4 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> x </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                </term>
                <symbol> < </symbol>
                <term>
                  <intConst> 0 </intConst>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> x </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <intConst> 0 </intConst>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <identDesc name="Screen" kind="CLASS" declared="False"/>
              <identDesc name="setColor" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <identDesc name="Screen" kind="CLASS" declared="False"/>
              <identDesc name="drawRectangle" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> x </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier> width </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <intConst> 1 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> x </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier> width </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <intConst> 4 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> height </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <identDesc name="Screen" kind="CLASS" declared="False"/>
              <identDesc name="setColor" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <identDesc name="Screen" kind="CLASS" declared="False"/>
              <identDesc name="drawRectangle" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <intConst> 3 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> height </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> x </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                </term>
                <symbol> + </symbol>
                <term>
                  <intConst> 4 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <identifier> width </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> > </symbol>
                <term>
                  <intConst> 511 </intConst>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> x </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <intConst> 511 </intConst>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <identifier> width </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <identDesc name="Screen" kind="CLASS" declared="False"/>
              <identDesc name="setColor" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <identDesc name="Screen" kind="CLASS" declared="False"/>
              <identDesc name="drawRectangle" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <intConst> 4 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <intConst> 1 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> height </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> setColor </identifier>
              <identDesc name="Screen" kind="CLASS" declared="False"/>
              <identDesc name="setColor" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Screen </identifier>
              <symbol> . </symbol>
              <identifier> drawRectangle </identifier>
              <identDesc name="Screen" kind="CLASS" declared="False"/>
              <identDesc name="drawRectangle" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> x </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier> width </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <intConst> 3 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> width </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier> height </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
