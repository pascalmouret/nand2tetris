<class>
  <keyword> class </keyword>
  <identifier> Ball </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> x </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="True" />
    <symbol> , </symbol>
    <identifier> y </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> lengthx </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="True" />
    <symbol> , </symbol>
    <identifier> lengthy </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> d </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="True" />
    <symbol> , </symbol>
    <identifier> straightD </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="5" declared="True" />
    <symbol> , </symbol>
    <identifier> diagonalD </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> invert </identifier>
    <identDesc kind="IdentEnum.FIELD" type="boolean" index="7" declared="True" />
    <symbol> , </symbol>
    <identifier> positivex </identifier>
    <identDesc kind="IdentEnum.FIELD" type="boolean" index="8" declared="True" />
    <symbol> , </symbol>
    <identifier> positivey </identifier>
    <identDesc kind="IdentEnum.FIELD" type="boolean" index="9" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> leftWall </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="10" declared="True" />
    <symbol> , </symbol>
    <identifier> rightWall </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="11" declared="True" />
    <symbol> , </symbol>
    <identifier> topWall </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="12" declared="True" />
    <symbol> , </symbol>
    <identifier> bottomWall </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="13" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> wall </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Ball </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> Ax </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Ay </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="1" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AleftWall </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="2" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> ArightWall </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="3" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AtopWall </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="4" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AbottomWall </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="5" declared="True" />
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> x </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ax </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> y </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ay </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="1" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> leftWall </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="10" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> AleftWall </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="2" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> rightWall </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="11" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> ArightWall </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="3" declared="False" />
            </term>
            <symbol> - </symbol>
            <term>
              <intConst> 6 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> topWall </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="12" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> AtopWall </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="4" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> bottomWall </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="13" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> AbottomWall </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="5" declared="False" />
            </term>
            <symbol> - </symbol>
            <term>
              <intConst> 6 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> wall </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <intConst> 0 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> show </identifier>
          <identDesc name="show" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
          <identDesc name="Memory" kind="CLASS" declared="False"/>
          <identDesc name="deAlloc" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> show </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <identDesc name="Screen" kind="CLASS" declared="False"/>
          <identDesc name="setColor" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> true </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
          <identDesc name="draw" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> hide </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> setColor </identifier>
          <identDesc name="Screen" kind="CLASS" declared="False"/>
          <identDesc name="setColor" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> false </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
          <identDesc name="draw" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <identDesc name="Screen" kind="CLASS" declared="False"/>
          <identDesc name="drawRectangle" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> x </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> x </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
              </term>
              <symbol> + </symbol>
              <term>
                <intConst> 5 </intConst>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
              </term>
              <symbol> + </symbol>
              <term>
                <intConst> 5 </intConst>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
            </term>
            <symbol> + </symbol>
            <term>
              <intConst> 5 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> setDestination </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> destx </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="True" />
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> desty </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="1" declared="True" />
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> dx </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="True" />
        <symbol> , </symbol>
        <identifier> dy </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="True" />
        <symbol> , </symbol>
        <identifier> temp </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="True" />
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> lengthx </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> destx </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
            </term>
            <symbol> - </symbol>
            <term>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> lengthy </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> desty </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="1" declared="False" />
            </term>
            <symbol> - </symbol>
            <term>
              <identifier> y </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> dx </identifier>
          <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
              <symbol> . </symbol>
              <identifier> abs </identifier>
              <identDesc name="Math" kind="CLASS" declared="False"/>
              <identDesc name="abs" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> lengthx </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> dy </identifier>
          <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
              <symbol> . </symbol>
              <identifier> abs </identifier>
              <identDesc name="Math" kind="CLASS" declared="False"/>
              <identDesc name="abs" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> lengthy </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> invert </identifier>
          <identDesc kind="IdentEnum.FIELD" type="boolean" index="7" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> dx </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                </term>
                <symbol> < </symbol>
                <term>
                  <identifier> dy </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> invert </identifier>
              <identDesc kind="IdentEnum.FIELD" type="boolean" index="7" declared="False" />
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> temp </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> dx </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> dx </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> dy </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> dy </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> temp </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivex </identifier>
              <identDesc kind="IdentEnum.FIELD" type="boolean" index="8" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                    </term>
                    <symbol> < </symbol>
                    <term>
                      <identifier> desty </identifier>
                      <identDesc kind="IdentEnum.ARG" type="int" index="1" declared="False" />
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivey </identifier>
              <identDesc kind="IdentEnum.FIELD" type="boolean" index="9" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                    </term>
                    <symbol> < </symbol>
                    <term>
                      <identifier> destx </identifier>
                      <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivex </identifier>
              <identDesc kind="IdentEnum.FIELD" type="boolean" index="8" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                    </term>
                    <symbol> < </symbol>
                    <term>
                      <identifier> destx </identifier>
                      <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivey </identifier>
              <identDesc kind="IdentEnum.FIELD" type="boolean" index="9" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                    </term>
                    <symbol> < </symbol>
                    <term>
                      <identifier> desty </identifier>
                      <identDesc kind="IdentEnum.ARG" type="int" index="1" declared="False" />
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> d </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <intConst> 2 </intConst>
                </term>
                <symbol> * </symbol>
                <term>
                  <identifier> dy </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> - </symbol>
            <term>
              <identifier> dx </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> straightD </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="5" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <intConst> 2 </intConst>
            </term>
            <symbol> * </symbol>
            <term>
              <identifier> dy </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> diagonalD </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <intConst> 2 </intConst>
            </term>
            <symbol> * </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> dy </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                </term>
                <symbol> - </symbol>
                <term>
                  <identifier> dx </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> move </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> hide </identifier>
          <identDesc name="hide" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> d </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
            </term>
            <symbol> < </symbol>
            <term>
              <intConst> 0 </intConst>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> d </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> d </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> straightD </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="5" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> d </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> d </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> diagonalD </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> positivey </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="boolean" index="9" declared="False" />
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> invert </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="boolean" index="7" declared="False" />
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> x </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> x </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <intConst> 4 </intConst>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> y </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> y </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <intConst> 4 </intConst>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> invert </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="boolean" index="7" declared="False" />
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> x </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> x </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <intConst> 4 </intConst>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> y </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> y </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <intConst> 4 </intConst>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> positivex </identifier>
              <identDesc kind="IdentEnum.FIELD" type="boolean" index="8" declared="False" />
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> invert </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="boolean" index="7" declared="False" />
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> y </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <intConst> 4 </intConst>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> x </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <intConst> 4 </intConst>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> invert </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="boolean" index="7" declared="False" />
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> y </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <intConst> 4 </intConst>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> x </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <intConst> 4 </intConst>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  </term>
                  <symbol> > </symbol>
                  <term>
                    <identifier> leftWall </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="10" declared="False" />
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> wall </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <intConst> 1 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> leftWall </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="10" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                  </term>
                  <symbol> < </symbol>
                  <term>
                    <identifier> rightWall </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="11" declared="False" />
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> wall </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <intConst> 2 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> rightWall </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="11" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                  <symbol> > </symbol>
                  <term>
                    <identifier> topWall </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="12" declared="False" />
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> wall </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <intConst> 3 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> y </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> topWall </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="12" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                  </term>
                  <symbol> < </symbol>
                  <term>
                    <identifier> bottomWall </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="13" declared="False" />
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> wall </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <intConst> 4 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> y </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> bottomWall </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="13" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> show </identifier>
          <identDesc name="show" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> wall </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> bounce </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> bouncingDirection </identifier>
      <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="True" />
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> newx </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="True" />
        <symbol> , </symbol>
        <identifier> newy </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="True" />
        <symbol> , </symbol>
        <identifier> divLengthx </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="True" />
        <symbol> , </symbol>
        <identifier> divLengthy </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="True" />
        <symbol> , </symbol>
        <identifier> factor </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="True" />
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> divLengthx </identifier>
          <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> lengthx </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
            </term>
            <symbol> / </symbol>
            <term>
              <intConst> 10 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> divLengthy </identifier>
          <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> lengthy </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="3" declared="False" />
            </term>
            <symbol> / </symbol>
            <term>
              <intConst> 10 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> bouncingDirection </identifier>
              <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
            </term>
            <symbol> = </symbol>
            <term>
              <intConst> 0 </intConst>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> factor </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <intConst> 10 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> ~ </symbol>
                          <term>
                            <symbol> ( </symbol>
                            <expression>
                              <term>
                                <identifier> lengthx </identifier>
                                <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                              </term>
                              <symbol> < </symbol>
                              <term>
                                <intConst> 0 </intConst>
                              </term>
                            </expression>
                            <symbol> ) </symbol>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> & </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> bouncingDirection </identifier>
                          <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <intConst> 1 </intConst>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> | </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> lengthx </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                        </term>
                        <symbol> < </symbol>
                        <term>
                          <intConst> 0 </intConst>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> & </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> bouncingDirection </identifier>
                          <identDesc kind="IdentEnum.ARG" type="int" index="0" declared="False" />
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <symbol> - </symbol>
                              <term>
                                <intConst> 1 </intConst>
                              </term>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> factor </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <intConst> 20 </intConst>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> factor </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <intConst> 5 </intConst>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> wall </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
            </term>
            <symbol> = </symbol>
            <term>
              <intConst> 1 </intConst>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> newx </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <intConst> 506 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> newy </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> divLengthy </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="False" />
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> - </symbol>
                          <term>
                            <intConst> 50 </intConst>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> / </symbol>
                <term>
                  <identifier> divLengthx </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> newy </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> y </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                </term>
                <symbol> + </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> newy </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <identifier> factor </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> wall </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
                </term>
                <symbol> = </symbol>
                <term>
                  <intConst> 2 </intConst>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newx </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <intConst> 0 </intConst>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newy </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> divLengthy </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="False" />
                        </term>
                        <symbol> * </symbol>
                        <term>
                          <intConst> 50 </intConst>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> / </symbol>
                    <term>
                      <identifier> divLengthx </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newy </identifier>
                  <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="1" declared="False" />
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> newy </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                        </term>
                        <symbol> * </symbol>
                        <term>
                          <identifier> factor </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> wall </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="14" declared="False" />
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <intConst> 3 </intConst>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newy </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <intConst> 250 </intConst>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newx </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> divLengthx </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> - </symbol>
                                  <term>
                                    <intConst> 25 </intConst>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <identifier> divLengthy </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="False" />
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newx </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> x </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> newx </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <identifier> factor </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newy </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <intConst> 0 </intConst>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newx </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> divLengthx </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <intConst> 25 </intConst>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <identifier> divLengthy </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="False" />
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newx </identifier>
                      <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> x </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="0" declared="False" />
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> newx </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <identifier> factor </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> setDestination </identifier>
          <identDesc name="setDestination" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> newx </identifier>
                <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> newy </identifier>
                <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
