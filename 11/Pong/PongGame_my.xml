<class>
  <keyword> class </keyword>
  <identifier> PongGame </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <identifier> PongGame </identifier>
    <identifier> instance </identifier>
    <identDesc kind="IdentEnum.STATIC" type="PongGame" index="0" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Bat </identifier>
    <identifier> bat </identifier>
    <identDesc kind="IdentEnum.FIELD" type="Bat" index="0" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Ball </identifier>
    <identifier> ball </identifier>
    <identDesc kind="IdentEnum.FIELD" type="Ball" index="1" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> wall </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> exit </identifier>
    <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> score </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> lastWall </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="5" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> batWidth </identifier>
    <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="True" />
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> PongGame </identifier>
    <identifier> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> clearScreen </identifier>
          <identDesc name="Screen" kind="CLASS" declared="False"/>
          <identDesc name="clearScreen" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> batWidth </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <intConst> 50 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> bat </identifier>
          <identDesc kind="IdentEnum.FIELD" type="Bat" index="0" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Bat </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <identDesc name="Bat" kind="CLASS" declared="False"/>
              <identDesc name="new" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <intConst> 230 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <intConst> 229 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> batWidth </identifier>
                    <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="False" />
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <intConst> 7 </intConst>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ball </identifier>
          <identDesc kind="IdentEnum.FIELD" type="Ball" index="1" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ball </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <identDesc name="Ball" kind="CLASS" declared="False"/>
              <identDesc name="new" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <intConst> 253 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <intConst> 222 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <intConst> 0 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <intConst> 511 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <intConst> 0 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <intConst> 229 </intConst>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> ball </identifier>
          <symbol> . </symbol>
          <identifier> setDestination </identifier>
          <identDesc name="ball" kind="CLASS" declared="False"/>
          <identDesc name="setDestination" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <intConst> 400 </intConst>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <intConst> 0 </intConst>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <identDesc name="Screen" kind="CLASS" declared="False"/>
          <identDesc name="drawRectangle" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <intConst> 0 </intConst>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <intConst> 238 </intConst>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <intConst> 511 </intConst>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <intConst> 240 </intConst>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <identDesc name="Output" kind="CLASS" declared="False"/>
          <identDesc name="moveCursor" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <intConst> 22 </intConst>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <intConst> 0 </intConst>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <identDesc name="Output" kind="CLASS" declared="False"/>
          <identDesc name="printString" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConst> Score: 0 </stringConst>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> exit </identifier>
          <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> score </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <intConst> 0 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> wall </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <intConst> 0 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> lastWall </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="5" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <intConst> 0 </intConst>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> bat </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <identDesc name="bat" kind="CLASS" declared="False"/>
          <identDesc name="dispose" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> ball </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <identDesc name="ball" kind="CLASS" declared="False"/>
          <identDesc name="dispose" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
          <identDesc name="Memory" kind="CLASS" declared="False"/>
          <identDesc name="deAlloc" kind="SUB" declared="False"/>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> newInstance </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> instance </identifier>
          <identDesc kind="IdentEnum.STATIC" type="PongGame" index="0" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> PongGame </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <identDesc name="PongGame" kind="CLASS" declared="False"/>
              <identDesc name="new" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <identifier> PongGame </identifier>
    <identifier> getInstance </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> instance </identifier>
              <identDesc kind="IdentEnum.STATIC" type="PongGame" index="0" declared="False" />
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> run </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <identifier> key </identifier>
        <identDesc kind="IdentEnum.VAR" type="char" index="0" declared="True" />
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <identifier> exit </identifier>
                <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="False" />
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> key </identifier>
                      <identDesc kind="IdentEnum.VAR" type="char" index="0" declared="False" />
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <intConst> 0 </intConst>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> & </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> exit </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="False" />
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> key </identifier>
                  <identDesc kind="IdentEnum.VAR" type="char" index="0" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> Keyboard </identifier>
                      <symbol> . </symbol>
                      <identifier> keyPressed </identifier>
                      <identDesc name="Keyboard" kind="CLASS" declared="False"/>
                      <identDesc name="keyPressed" kind="SUB" declared="False"/>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bat </identifier>
                  <symbol> . </symbol>
                  <identifier> move </identifier>
                  <identDesc name="bat" kind="CLASS" declared="False"/>
                  <identDesc name="move" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> moveBall </identifier>
                  <identDesc name="moveBall" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Sys </identifier>
                  <symbol> . </symbol>
                  <identifier> wait </identifier>
                  <identDesc name="Sys" kind="CLASS" declared="False"/>
                  <identDesc name="wait" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <intConst> 50 </intConst>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                  <identDesc kind="IdentEnum.VAR" type="char" index="0" declared="False" />
                </term>
                <symbol> = </symbol>
                <term>
                  <intConst> 130 </intConst>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bat </identifier>
                  <symbol> . </symbol>
                  <identifier> setDirection </identifier>
                  <identDesc name="bat" kind="CLASS" declared="False"/>
                  <identDesc name="setDirection" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <intConst> 1 </intConst>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> key </identifier>
                      <identDesc kind="IdentEnum.VAR" type="char" index="0" declared="False" />
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <intConst> 132 </intConst>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> bat </identifier>
                      <symbol> . </symbol>
                      <identifier> setDirection </identifier>
                      <identDesc name="bat" kind="CLASS" declared="False"/>
                      <identDesc name="setDirection" kind="SUB" declared="False"/>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <intConst> 2 </intConst>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> key </identifier>
                          <identDesc kind="IdentEnum.VAR" type="char" index="0" declared="False" />
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <intConst> 140 </intConst>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> exit </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="False" />
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <keyword> true </keyword>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <identifier> key </identifier>
                            <identDesc kind="IdentEnum.VAR" type="char" index="0" declared="False" />
                          </term>
                          <symbol> = </symbol>
                          <term>
                            <intConst> 0 </intConst>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> & </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> exit </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="False" />
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> key </identifier>
                  <identDesc kind="IdentEnum.VAR" type="char" index="0" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> Keyboard </identifier>
                      <symbol> . </symbol>
                      <identifier> keyPressed </identifier>
                      <identDesc name="Keyboard" kind="CLASS" declared="False"/>
                      <identDesc name="keyPressed" kind="SUB" declared="False"/>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bat </identifier>
                  <symbol> . </symbol>
                  <identifier> move </identifier>
                  <identDesc name="bat" kind="CLASS" declared="False"/>
                  <identDesc name="move" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> moveBall </identifier>
                  <identDesc name="moveBall" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Sys </identifier>
                  <symbol> . </symbol>
                  <identifier> wait </identifier>
                  <identDesc name="Sys" kind="CLASS" declared="False"/>
                  <identDesc name="wait" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <intConst> 50 </intConst>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> exit </identifier>
              <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="False" />
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <identDesc name="Output" kind="CLASS" declared="False"/>
              <identDesc name="moveCursor" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <intConst> 10 </intConst>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <intConst> 27 </intConst>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <symbol> . </symbol>
              <identifier> printString </identifier>
              <identDesc name="Output" kind="CLASS" declared="False"/>
              <identDesc name="printString" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConst> Game Over </stringConst>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveBall </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> bouncingDirection </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="True" />
        <symbol> , </symbol>
        <identifier> batLeft </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="True" />
        <symbol> , </symbol>
        <identifier> batRight </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="True" />
        <symbol> , </symbol>
        <identifier> ballLeft </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="True" />
        <symbol> , </symbol>
        <identifier> ballRight </identifier>
        <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="True" />
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> wall </identifier>
          <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> ball </identifier>
              <symbol> . </symbol>
              <identifier> move </identifier>
              <identDesc name="ball" kind="CLASS" declared="False"/>
              <identDesc name="move" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> wall </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                </term>
                <symbol> > </symbol>
                <term>
                  <intConst> 0 </intConst>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> & </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ~ </symbol>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> wall </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                      </term>
                      <symbol> = </symbol>
                      <term>
                        <identifier> lastWall </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="int" index="5" declared="False" />
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> lastWall </identifier>
              <identDesc kind="IdentEnum.FIELD" type="int" index="5" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> wall </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> bouncingDirection </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <intConst> 0 </intConst>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> batLeft </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> bat </identifier>
                  <symbol> . </symbol>
                  <identifier> getLeft </identifier>
                  <identDesc name="bat" kind="CLASS" declared="False"/>
                  <identDesc name="getLeft" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> batRight </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> bat </identifier>
                  <symbol> . </symbol>
                  <identifier> getRight </identifier>
                  <identDesc name="bat" kind="CLASS" declared="False"/>
                  <identDesc name="getRight" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> ballLeft </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> ball </identifier>
                  <symbol> . </symbol>
                  <identifier> getLeft </identifier>
                  <identDesc name="ball" kind="CLASS" declared="False"/>
                  <identDesc name="getLeft" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> ballRight </identifier>
              <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> ball </identifier>
                  <symbol> . </symbol>
                  <identifier> getRight </identifier>
                  <identDesc name="ball" kind="CLASS" declared="False"/>
                  <identDesc name="getRight" kind="SUB" declared="False"/>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> wall </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="int" index="2" declared="False" />
                </term>
                <symbol> = </symbol>
                <term>
                  <intConst> 4 </intConst>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> exit </identifier>
                  <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="False" />
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> batLeft </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                        </term>
                        <symbol> > </symbol>
                        <term>
                          <identifier> ballRight </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> | </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> batRight </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
                        </term>
                        <symbol> < </symbol>
                        <term>
                          <identifier> ballLeft </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="False" />
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> exit </identifier>
                        <identDesc kind="IdentEnum.FIELD" type="boolean" index="3" declared="False" />
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> ballRight </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="4" declared="False" />
                        </term>
                        <symbol> < </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> batLeft </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="1" declared="False" />
                            </term>
                            <symbol> + </symbol>
                            <term>
                              <intConst> 10 </intConst>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> bouncingDirection </identifier>
                          <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <symbol> - </symbol>
                              <term>
                                <intConst> 1 </intConst>
                              </term>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                      <keyword> else </keyword>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> ballLeft </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="3" declared="False" />
                            </term>
                            <symbol> > </symbol>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <identifier> batRight </identifier>
                                  <identDesc kind="IdentEnum.VAR" type="int" index="2" declared="False" />
                                </term>
                                <symbol> - </symbol>
                                <term>
                                  <intConst> 10 </intConst>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> bouncingDirection </identifier>
                              <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <intConst> 1 </intConst>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> batWidth </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> batWidth </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="False" />
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <intConst> 2 </intConst>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> bat </identifier>
                      <symbol> . </symbol>
                      <identifier> setWidth </identifier>
                      <identDesc name="bat" kind="CLASS" declared="False"/>
                      <identDesc name="setWidth" kind="SUB" declared="False"/>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> batWidth </identifier>
                            <identDesc kind="IdentEnum.FIELD" type="int" index="6" declared="False" />
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> score </identifier>
                      <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> score </identifier>
                          <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <intConst> 1 </intConst>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <symbol> . </symbol>
                      <identifier> moveCursor </identifier>
                      <identDesc name="Output" kind="CLASS" declared="False"/>
                      <identDesc name="moveCursor" kind="SUB" declared="False"/>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <intConst> 22 </intConst>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <intConst> 7 </intConst>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <symbol> . </symbol>
                      <identifier> printInt </identifier>
                      <identDesc name="Output" kind="CLASS" declared="False"/>
                      <identDesc name="printInt" kind="SUB" declared="False"/>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> score </identifier>
                            <identDesc kind="IdentEnum.FIELD" type="int" index="4" declared="False" />
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> ball </identifier>
              <symbol> . </symbol>
              <identifier> bounce </identifier>
              <identDesc name="ball" kind="CLASS" declared="False"/>
              <identDesc name="bounce" kind="SUB" declared="False"/>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> bouncingDirection </identifier>
                    <identDesc kind="IdentEnum.VAR" type="int" index="0" declared="False" />
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
