// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int freeHead, freeTail;

    /** Initializes the class. */
    function void init() {
        let freeHead = 2048;
        let freeHead[0] = 2051;     // first free address
        let freeHead[1] = 14332;    // full heap
        let freeHead[2] = 0;        // no next
        let freeTail = freeHead;
        
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return address[0];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let address[0] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block, startAdr;
        let block = freeHead;

        while (block[0] < size) { // we need size + 1 for length
            let block = block[1];
            if (block = 0) {
                do System.error(401);
            }
        }

        let startAdr = block[0] + 1;
        let startAdr[-1] = size;
        let block[0] = startAdr + size;
        let block[1] = block[1] - size - 1;

        return startAdr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int newBlock;
        let newBlock = Memory.alloc(2);
        let newBlock[0] = o - 1;
        let newBlock[1] = o[-1] + 1;
        return;
    }    
}
